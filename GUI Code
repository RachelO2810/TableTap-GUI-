"""

Author:  Rachel Olsen
Date written: 11/29/2024
Assignment: Final Project - TableTap Gui
Short Desc: This GUI program allows the user to manage their restaurant: Menu items and prices can be added, table layout can be adjusted, servers can clock in, enter customer orders, print customer checks, apply payments to customer bills, and add tips.

"""


import tkinter as tk
from tkinter import *
from PIL import Image, ImageTk
from tkinter import messagebox
import json

class TableTapSimple:
    """The inner workings of the TableTap application"""

    def __init__(self, root):
        self.root = root
        self.root.title('TableTapSimple') #set window title
        self.root.iconbitmap('TableTap-Icon.ico') #set window icon to TableTap logo
        
        #file for saving and loading menu items
        self.filepath = 'Menu Items.json'

        # In-memory storage for menu items
        self.menu_items = self.load_data(self.filepath)

        #Window on open
        self.mainWindow()

    #def populate_listbox(listbox, data_list):
        #listbox.delete(0, tk.END)  # Clear existing items
        #for item in data_list:
            #listbox.insert(tk.END, item)
    
    
    def save_json(self, file_path, data):
        """Opens file and saves menu items"""

        try:
            with open(file_path, 'w') as f:
                json.dump(data, f, indent=4)
            print(f'Data saved successfully!')
        except Exception as e:
             print(f"Error saving list: {e}")

    def load_data(self, filepath):
        """load previously entered menu items"""
    
        try:
            with open(filepath, "r") as f:
                data = json.load(f)
            print(f'Data loaded successfully!')
            return data
        except FileNotFoundError:
            print(f"Error: File not found: {filepath}")
            return []
        except json.JSONDecodeError:
            print(f"Error: Invalid JSON format in file: {filepath}")
            return []

    def onExit(self):
        """Save and Close events when exiting program"""

        self.save_json(self.filepath, self.menu_items) #save menu items
        self.root.quit() #close program
        
    def mainWindow(self):
        """Opening window for program"""

        for widget in self.root.winfo_children():
            widget.destroy()

        #set the root window size and color
        self.root.geometry('800x600+250+50')
        self.root.resizable(False, False)
        self.root.config(bg = 'navy blue')
            
        #Main Login
        #making and arranging widgets
        self.title_frame = tk.Frame(self.root, bg = 'navy blue')
        self.title_frame.pack(pady = 40)

        #add title to frame
        self.title1 = tk.Label(self.title_frame, text = 'Welcome to', font = 'Calibri 36', bg = 'navy blue', fg = 'white')
        self.title2 = tk.Label(self.title_frame, text = 'TableTapSimple', font = 'Calibri 42 bold', bg = 'navy blue', fg = 'white')
        self.title1.grid(row = 0, column = 0)
        self.title2.grid(row = 1, column = 0)

        #creating image label 
        self.imagePath = 'TableTap Icon.png'
        self.newWidth = 100
        self.newHeight = 100

        self.tabletap_logo_img = self.resize_image(self.imagePath, self.newWidth, self.newHeight) #call resize function to ensure fit on screen
        #validate successful image loading and resizing
        if self.tabletap_logo_img:
            self.tabletap_img_label = tk.Label(self.title_frame, image = self.tabletap_logo_img, borderwidth = 0, bg = 'navy blue')
            self.tabletap_img_label.grid(row = 2, column = 0)
            self.tabletap_img_label.image = self.tabletap_logo_img #saves image from garbage collection
        else:
            self.error_label = tk.Label(self.title_frame, text="Failed to load image", fg="red")
            self.error_label.grid(row = 2, column = 0)

        #alt text for image
        self.alt_text_image_label = tk.Label(self.title_frame, text = 'Alt text: TableTap Logo', font = 'Calibri 7', bg = 'navy blue')
        self.alt_text_image_label.grid(row = 3, column = 0)
        

        self.login_frame = tk.Frame(self.root, bg = 'navy blue')
        self.login_frame.pack()
        #login option buttons
        self.login_manager_btn = tk.Button(self.login_frame, text = 'Manager Login', font = 'Calibri  24', bg = 'dark gray', fg = 'white', width = 15, command = self.managerLoginWindow)
        self.login_manager_btn.pack(pady = 5)

        self.order_screen_btn = tk.Button(self.login_frame, text = 'Order Screen', font = 'Calibri 24', bg = 'dark gray', fg = 'black', width = 15, command = self.orderWindow)
        self.order_screen_btn.pack()

        #Exit Button
        self.exit_btn = tk.Button(self.root, text = 'Exit', font = 'Calibri 12', width = 5, command = self.onExit)
        self.exit_btn.pack(pady = 40)


    def resize_image(self, imagePath, newWidth, newHeight):
        """Resizes images used in program design"""

        try: #resizes image if imgae file found
            self.image = Image.open(imagePath)
            self.resized_image = self.image.resize((newWidth, newHeight), Image.LANCZOS)
            return ImageTk.PhotoImage(self.resized_image)
        except FileNotFoundError: #displays error message to inform user that image file not found
            print(f"Error: Image file not found at {imagePath}")
            return None
        
    def managerLoginWindow(self):
        """Login window for manager"""

        for widget in self.root.winfo_children():
            widget.destroy()

        #set the root window size and color
        self.root.geometry('800x600+250+50')
        self.root.resizable(False, False)
        self.root.config(bg = 'navy blue')

        #Manager Login Screen - making and arranging widgets
        self.login_frame = tk.Frame(self.root, bg = 'navy blue')
        self.login_frame.grid(row=1, column=0, padx = (325, 0), pady=(225, 0))
        self.enter_pin_label = tk.Label(self.login_frame, text = 'Enter Your Pin', font = 'Calibri 20', bg = 'navy blue', fg = 'white')
        self.enter_pin_label.grid(row = 0, column = 0, pady = (0, 10), sticky = 'NSEW')
          
        self.enter_pin_var = StringVar()
        self.enter_pin_inp = tk.Entry(self.login_frame, textvariable = self.enter_pin_var, font = 'Calibri 10')
        self.enter_pin_inp.grid(row = 1, column = 0, pady = 10, sticky = 'NSEW')

        self.login_btn = tk.Button(self.login_frame, text = 'Login', font = 'Calibri 24', bg = 'dark gray', fg = 'white', command = self.validateLogin)
        self.login_btn.grid(row = 2, column = 0, pady = (10,0), sticky = 'NSEW')
        
        #creating back button
        self.imagePath = 'Back Arrow White.png'
        self.newWidth = 100
        self.newHeight = 100

        self.goBack_img = self.resize_image(self.imagePath, self.newWidth, self.newHeight)

        #validate successful image loading and resizing
        if self.goBack_img:
            self.go_back_btn = tk.Button(root, image = self.goBack_img, borderwidth = 0, bg = 'navy blue', command = self.mainWindow)
            self.go_back_btn.place(x = 10, y = 10)
            self.go_back_btn.image = self.goBack_img #saves image from garbage collection
        else:
            self.error_label = tk.Button(root, text="Failed to load image", fg="red", command = self.mainWindow )
            self.error_label.place(x = 10, y = 10)

    # Functions to validate manager login
    def getStoredCredentials(self):
        """stores login info"""

        self.stored_passcode = '2589'
        return self.stored_passcode
    
    '''def login(self):
         username = self.username_entry.get()
         password = self.password_entry.get()

         if self.validate_login(username, password):
            messagebox.showinfo("Success", "Login successful!")
         else:
            messagebox.showerror("Error", "Invalid username or password.")

    def validate_login(self, username, password):
        # Replace with your actual validation logic
        # For example, check against a database or a file
        if username == "admin" and password == "password":
            return True
        else:
            return False'''

    def validateLogin(self):
        """Validates the login credentials."""

        self.entered_passcode = self.enter_pin_inp.get()
        self.stored_passcode = self.getStoredCredentials()

        if self.entered_passcode == self.stored_passcode: #checks is passcode is correct
            messagebox.showinfo("Success", "Login successful!")
            self.managerMenuWindow()
        else:
            messagebox.showerror("Error", "Invalid username or password.") #displays error message for incorrect passcode

    #manager main menu
    def managerMenuWindow(self):
        """Main window after manager logs in"""

        for widget in self.root.winfo_children():
            widget.destroy()

        #set the root window size and color
        self.root.geometry('800x600+250+50')
        self.root.resizable(False, False)
        self.root.config(bg = 'navy blue')

        #Manager Main Menu - making and arranging widgets
        self.title_frame = tk.Frame(root, bg = 'navy blue')
        self.title_frame.pack(pady = 75)
        #add title to frame
        self.manager_main_menu_title = tk.Label(self.title_frame, text = 'Manage Your Restaurant', font = 'Calibri 30 bold', bg = 'navy blue', fg = 'white')
        self.manager_main_menu_title.grid(row = 0, column = 1)

        #creating image label 
        self.imagePath = 'Restaurant Graphic.png'
        self.newWidth = 100
        self.newHeight = 100

        self.restaurant_img = self.resize_image(self.imagePath, self.newWidth, self.newHeight) #call resize function to ensure fit on screen
        #validate successful image loading and resizing
        if self.restaurant_img:
            self.restaurant_img_label = tk.Label(self.title_frame, image = self.restaurant_img, borderwidth = 0, bg = 'navy blue')
            self.restaurant_img_label.grid(row = 0, column = 0)
            self.restaurant_img_label.image = self.restaurant_img #saves image from garbage collection
        else:
            self.error_label = tk.Label(self.title_frame, text="Failed to load image", fg="red")
            self.error_label.grid(row = 0, column = 0)

        #alt text for image
        self.alt_text_image_label = tk.Label(self.title_frame, text = 'Alt text: Graphic of a restaurant', font = 'Calibri 7', bg = 'navy blue')
        self.alt_text_image_label.grid(row = 1, column = 0)

        #main menu buttons
        self.menu_button_frame = tk.Frame(root, bg = 'navy blue')
        self.menu_button_frame.pack()
        #add buttons to frame
        self.create_menu_items_btn = tk.Button(self.menu_button_frame, text = 'Create Menu Items', font = 'Calibri 20', width = 18, bg = 'dim gray', fg = 'whitesmoke', command = self.createMenuWindow)
        self.create_menu_items_btn.grid(pady = 5)

        self.manager_logout_btn = tk.Button(root, text = 'Log Out', font = 'Calibri 12', bg = 'dark gray', fg = 'white', command = self.mainWindow)
        self.manager_logout_btn.pack(pady = (30, 0))

    def createMenuWindow(self):
        """Window for creating menu items"""

        for widget in self.root.winfo_children():
            widget.destroy()
        
        #set the root window size and color
        self.root.geometry('800x600+250+50')
        self.root.resizable(False, False)
        self.root.config(bg = 'navy blue')

        self.menu_items_list_var = tk.StringVar(value=())
        self.menu_items_list_var.set(tuple([f"{item['Name']} - ${item['Price']} - {item['Category']})" for item in self.menu_items]))
        self.menu_items_listbox = tk.Listbox(root, width = 100, listvariable = self.menu_items_list_var, height = 20) 
        self.menu_items_listbox.pack(pady = (10, 2))

        #item creation/manipulation buttons frame
        self.item_buttons_frame = tk.Frame(root, bg = 'navy blue')
        self.item_buttons_frame.pack()
        self.add_item_btn = tk.Button(self.item_buttons_frame, text = 'Add Item', font = 'Calibri 16', bg = 'black', fg = 'white', width = 10, command = self.addItemWindow)
        self.update_item_btn = tk.Button(self.item_buttons_frame, text = 'Update Item', font = 'Calibri 16', bg = 'black', fg = 'white', width = 10, command = self.updateSelection)
        self.delete_item_btn = tk.Button(self.item_buttons_frame, text = 'Delete Item', font = 'Calibri 16', bg = 'black', fg = 'white', width = 10, command = self.deleteSelection)
        self.add_item_btn.grid(row = 0, column = 2, sticky = E)
        self.update_item_btn.grid(row = 0, column = 1, sticky = E)
        self.delete_item_btn.grid(row = 0, column = 0, sticky = E)

        #Return to Menu button
        self.return_button = tk.Button(root, text = 'Return to Main Menu', width = 20, command = self.managerMenuWindow)
        self.return_button.pack(pady = 20)

    def addItemWindow(self):
        """Window that allows user to enter a new menu item"""

        #self.menu_items_listbox = listbox #change name for listbox to match createMenuWindow listbox name for better documentation 
        self.categories = ['Drinks', 
        'Apps', 
        'Entrees', 
        'Kids', 
        'Sides', 
        ] #category options for menu item

        #set window size 
        self.add_window = tk.Toplevel()
        self.add_window.geometry('400x400+250+50')

        #create and arrange user input widgets
        self.add_item_label = tk.Label(self.add_window, text = 'New Menu Item', font=("Calibri", 16))
        self.add_item_label.pack(pady=10)

        self.item_name_label = tk.Label(self.add_window, text = 'Item Name: ')
        self.item_name_inp = tk.Entry(self.add_window) #user input for menu item name
        self.item_name_label.pack()
        self.item_name_inp.pack()

        self.item_price_label = tk.Label(self.add_window, text = 'Item Price: ')
        self.item_price_inp = tk.Entry(self.add_window) #user input for menu item price
        self.item_price_label.pack()
        self.item_price_inp.pack()

        self.category_var = StringVar()
        self.category_var.set('Entrees')
        self.category_label = tk.Label(self.add_window, text = 'Category: ')
        self.category_dropdown = tk.OptionMenu(self.add_window, self.category_var, *self.categories) #user menu item category selection
        self.category_label.pack()
        self.category_dropdown.pack()

        # Buttons for saving or canceling
        self.save_button = tk.Button(self.add_window, text="Save", width=20, command = self.saveItem)
        self.save_button.pack(pady=5)

        self.cancel_button = tk.Button(self.add_window, text="Cancel", width=20, command = self.add_window.destroy)
        self.cancel_button.pack(pady=5)
    

    def saveItem(self):
        """function for saving newly added menu item to listbox"""

        #menu_items_listbox = listbox #change name for listbox to match createMenuWindow listbox name for better documentation 
        self.itemName = self.item_name_inp.get() #get menu item name
        self.itemPrice = self.item_price_inp.get() #get menu item price
        self.category = self.category_var.get() #get menu item category

        #Validate input
        if not self.itemName or not self.itemPrice:
            messagebox.showerror("Input Error", "Item name and price must be entered.")
            return
        else:
            #itemPrice = self.validate_price()
            #Save new menu item in menu_item list
            self.new_item = {'Name': self.itemName, 'Price': self.itemPrice, 'Category': self.category}
            self.menu_items.append(self.new_item)
            messagebox.showinfo(f'New Menu Item Added', f'{self.new_item['Name']}')

            #add menu item to listbox
            self.menu_items_listbox.insert(tk.END, f"{self.new_item['Name']} - ${self.new_item['Price']} - {self.new_item['Category']}")
            
            #close add item window
            self.add_window.destroy()

    def updateSelection(self):
         self.updateItem(self.menu_items_listbox)

    def updateItem(self, listbox):
        #menu_items_listbox = listbox
        self.selected_index = listbox.curselection() #gets selected menu item from listbox
        
        if not self.selected_index:
            messagebox.showerror("Selection Error", "Please select a menu item to update.")
            return
        else:
            self.index = self.selected_index[0]
            self.old_item = self.menu_items[self.index] #sets variable to previously entered menu item
            self.new_item = self.updateItemWindow(self.old_item) #gets new menu item values

            if self.new_item:
                self.menu_items[self.index] = f"{self.new_item['Name']} - ${self.new_item['Price']} - {self.new_item['Category']}"
                # Clear and update the listbox
                self.menu_items_listbox.delete(self.index)
                self.menu_items_listbox.insert(self.index, f"{self.new_item['Name']} - ${self.new_item['Price']} - {self.new_item['Category']}")
                self.menu_items_list_box.delete(0, tk.END)
                for item in self.menu_list:
                    self.menu_items_list_var.set(tk.END, f"{item['Name']} - ${item['Price']} - {item['Category']}")
                messagebox.showinfo('Menu Item Updated', f'({self.new_item['Name']})') # popup to let user know item was updated
                #self.createMenuWindow()

    def updateItemWindow(self, item):
        """Update Item Window"""

        #set window size
        self.update_window = tk.Toplevel()
        self.update_window.geometry('400x400+250+50')

        #defining varibles for menu item used to input into menu_items list and menu_items_listbox
        self.old_item = item #sets to item passed through function
        self.itemName = self.old_item['Name'] #sets to menu item name
        self.itemPrice = self.old_item['Price'] #sets to menu item price
        self.category = self.old_item['Category'] #sets to menu item category

        self.categories = ['Drinks', 
        'Apps', 
        'Entrees', 
        'Kids', 
        'Sides', 
        ] #categories for menu items

        #create and arrange user input widgets
        self.add_item_label = tk.Label(self.update_window, text = 'Update Menu Item', font=("Calibri", 16))
        self.add_item_label.pack(pady=10)

        self.item_name_label = tk.Label(self.update_window, text = 'Item Name: ')
        self.item_name_var = StringVar()
        self.item_name_var.set(self.itemName) #set to previously entered menu item name
        self.item_name_inp = tk.Entry(self.update_window, textvariable = self.item_name_var) #allow user to change menu item name
        self.item_name_label.pack()
        self.item_name_inp.pack()

        self.item_price_label = tk.Label(self.update_window, text = 'Item Price: ')
        self.item_price_var = StringVar()
        self.item_price_var.set(self.itemPrice) #set to previously entered menu item price
        self.item_price_inp = tk.Entry(self.update_window, textvariable = self.item_price_var) #allow user to change menu item price
        self.item_price_label.pack()
        self.item_price_inp.pack()

        self.category_var = StringVar()
        self.category_var.set(self.category) #set to previously entered menu item category
        self.category_label = tk.Label(self.update_window, text = 'Category: ')
        self.category_dropdown = tk.OptionMenu(self.update_window, self.category_var, *self.categories) #allow user to change menu item category
        self.category_label.pack()
        self.category_dropdown.pack()

        def save_update():
            """update menu item with new values"""

            itemName = self.item_name_var.get() #get update menu item name
            itemPrice = self.item_price_var.get() #get update menu item name
            category = self.category_var.get() #get update menu item name

            if not itemName or not itemPrice: #if name or price not entered, error message occurs
                messagebox.showerror("Input Error", "Item name and price must be entered.")
                return
            else:
                new_item = {'Name': itemName, 'Price': itemPrice, 'Category': category} #item with updated values
                self.update_window.destroy() #close update item window
                return new_item #return new item with new values
            
            
        
        #Buttons for saving or canceling
        self.update_button = tk.Button(self.update_window, text = "Update", width=20, command = save_update)
        self.update_button.pack(pady=5)

        self.cancel_button = tk.Button(self.update_window, text = "Cancel", width=20, command = self.update_window.destroy)
        self.cancel_button.pack(pady=5)

    def deleteSelection(self):
         self.deleteItem(self.menu_items_listbox)

    def deleteItem(self, listbox):
        # Validate menu item selection
        try:
            self.selected_index = listbox.curselection() #get menu item selection
            if not self.selected_index:
                messagebox.showerror("Selection Error", "Please select a menu item to update.")
                return
            else:
                listbox.delete(tk.ANCHOR) #delete menu item
        except IndexError:
            pass

        self.item = self.menu_items[self.selected_index[0]]
        self.menu_items.remove(self.item)
        #menu_items_listbox.delete(tk.ANCHOR)
        
        messagebox.showinfo("Menu Item Deleted", f"'{self.item['Name']}' has been deleted.")
        

    #did not have time to make functional
    def orderWindow(self):
        """Window for placing orders"""

        for widget in self.root.winfo_children():
            widget.destroy()
        
        #set the root window size and color
        self.root.geometry('800x600+250+50')
        self.root.resizable(False, False)
        self.root.config(bg = 'dark gray')

        #creating back button
        self.imagePath = 'Back Arrow Black.png'
        self.newWidth = 100
        self.newHeight = 100

        self.goBack_img = self.resize_image(self.imagePath, self.newWidth, self.newHeight)

        if self.goBack_img:
            self.go_back_btn = tk.Button(root, image = self.goBack_img, borderwidth = 0, bg = 'dark gray', height = 25, command = self.mainWindow)
            #photoimage = photo.subsample(3, 3)
            self.go_back_btn.place(x = 3, y = 40)
            self.go_back_btn.image = self.goBack_img
        else:
            self.error_label = tk.Button(root, text="Failed to load image", fg="red", command = self.mainWindow)
            self.error_label.place(x = 10, y = 10)

        self.order_screen_label = tk.Label(root, text = 'MENU', font = 'Calibri 30 bold', bg = 'dark gray', fg = 'black')
        self.order_screen_label.pack(pady = 50)

        #code testing population of check boxes from menu_items list
        #not currently functional
        '''
        create_button = tk.Button(root, text="Create Checkboxes", command= self.create_checkboxes)
        create_button.pack(pady=10)

        checkbox_frame = tk.Frame(root)
        checkbox_frame.pack(pady=10)

        self.checkbox_data = {}

        show_button = tk.Button(root, text="Show Selected Items", command= self.show_selected)
        show_button.pack(pady=10)

        result_label= tk.Label(root, text="")
        result_label.pack(pady=10)

        checkbox_vars = []
        for item in self.menu_items:
            var = tk.StringVar(value="0")  # Initialize as unchecked
            checkbox_vars.append(var)
            checkbutton = tk.Checkbutton(root, text=item, variable=var, onvalue="1", offvalue="0")
            checkbutton.pack(anchor="w")  # Align checkboxes to the left '''



if __name__ == "__main__":
    root = tk.Tk()
    app = TableTapSimple(root)
    root.mainloop()
